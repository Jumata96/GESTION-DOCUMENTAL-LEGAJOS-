<?php
bolt_decrypt( __FILE__ , '6kK9mP'); return 0;
##!!!##